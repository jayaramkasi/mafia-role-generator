{"version":3,"sources":["redux/constants/index.js","redux/actions/index.js","pages/GameDesignPage/index.js","pages/GameManagementPage/index.js","pages/RolesPage/index.js","pages/HowToUsePage/index.js","components/NavigationLinks/index.js","components/StopAlert/index.js","components/ShortToast/index.js","App.js","serviceWorker.js","redux/store/reducers/index.js","redux/store/index.js","index.js"],"names":["UPDATE_MAFIA_ROLES","UPDATE_VILLAGE_ROLES","UPDATE_PLAYER_NAMES","UPDATE_ALLOCATION","UPDATE_PLAYER_CHANNELS","SHOW_ALERT","HIDE_ALERT","SHOW_TOAST","HIDE_TOAST","updateMafia","mafiaRoles","type","payload","updateVillage","villageRoles","updatePlayers","playerNames","updateAllocation","allocation","showAlert","body","header","alert","show","withRouter","props","dispatch","useDispatch","useSelector","state","mafiaCount","Object","values","reduce","sum","value","villagerCount","players","dummyArray","Array","fill","allRoles","availableRoles","entries","filter","roleArray","role","count","i","push","uniqueAvailableRoles","Set","roleDisplay","roleObject","roleUpdateFn","map","Container","key","style","borderBottom","Row","Col","cursor","onClick","roleDescriptions","description","player","narrator","className","width","margin","color","icon","faAngleDoubleDown","faChevronDown","textAlign","faAngleDoubleUp","faChevronUp","faChevronRight","size","marginRight","history","sm","marginTop","marginBottom","Form","p","Control","required","placeholder","name","onChange","e","slice","target","Button","preventDefault","length","shuffledRoles","a","j","x","Math","random","shuffle","allotedRoles","countRolesLeft","allotedRoleIndex","allotedRole","alive","splice","aliveAllocation","mafiaAlive","villageAlive","faChevronLeft","textDecoration","InputGroup","maxWidth","Prepend","variant","marginLeft","faCheckCircle","faBan","hook","Append","otherAlerts","index","fetch","method","JSON","stringify","text","mate","then","response","toast","faPaperPlane","RolesPage","Card","Header","Body","Title","Text","roleDescription","padding","href","Navbar","fixed","collapseOnSelect","expand","bg","Brand","to","Toggle","aria-controls","Collapse","id","Nav","activeKey","Item","faInfoCircle","faUsers","StopAlert","Modal","onHide","closeButton","ShortToast","Toast","position","top","right","autoHide","dismissible","delay","onClose","App","fluid","exact","path","component","GameDesignPage","GameManagementPage","HowToUsePage","backgroundColor","Boolean","window","location","hostname","match","initialState","kamikaze","framer","silencer","godfather","mafia","idiot","deputy","granny","creep","gravedigger","sniper","bulletproof","doc","cop","villager","twins","rootReducer","action","includes","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f315136.chunk.js","sourcesContent":["export const UPDATE_MAFIA_ROLES = \"UPDATE_MAFIA_ROLES\";\nexport const UPDATE_VILLAGE_ROLES = \"UPDATE_VILLAGE_ROLES\";\nexport const UPDATE_PLAYER_NAMES = \"UPDATE_PLAYER_NAMES\";\nexport const UPDATE_ALLOCATION = \"UPDATE_ALLOCATION\";\nexport const UPDATE_PLAYER_CHANNELS = \"UPDATE_PLAYER_CHANNELS\";\nexport const UPDATE_SLACK_API_KEY = \"UPDATE_SLACK_KEY\";\nexport const SHOW_ALERT = \"SHOW_ALERT\";\nexport const HIDE_ALERT = \"HIDE_ALERT\";\nexport const SHOW_TOAST = \"SHOW_TOAST\";\nexport const HIDE_TOAST = \"HIDE_TOAST\";\n","import {\n  UPDATE_MAFIA_ROLES,\n  UPDATE_VILLAGE_ROLES,\n  UPDATE_PLAYER_NAMES,\n  UPDATE_ALLOCATION,\n  UPDATE_PLAYER_CHANNELS,\n  SHOW_ALERT,\n  HIDE_ALERT,\n  SHOW_TOAST,\n  HIDE_TOAST\n} from \"../constants\";\n\nexport const updateMafia = mafiaRoles => ({\n  type: UPDATE_MAFIA_ROLES,\n  payload: { mafiaRoles }\n});\n\nexport const updateVillage = villageRoles => ({\n  type: UPDATE_VILLAGE_ROLES,\n  payload: { villageRoles }\n});\n\nexport const updatePlayers = playerNames => ({\n  type: UPDATE_PLAYER_NAMES,\n  payload: { playerNames }\n});\n\nexport const updateAllocation = allocation => ({\n  type: UPDATE_ALLOCATION,\n  payload: { allocation }\n});\n\nexport const updatePlayerChannels = playerChannels => ({\n  type: UPDATE_PLAYER_CHANNELS,\n  payload: { playerChannels }\n});\n\nexport const showAlert = (body, header) => ({\n  type: SHOW_ALERT,\n  payload: {\n    alert: {\n      show: true,\n      header,\n      body\n    }\n  }\n});\n\nexport const hideAlert = () => ({\n  type: HIDE_ALERT,\n  payload: {\n    alert: {\n      show: false,\n      header: \"\",\n      body: \"\"\n    }\n  }\n});\n\nexport const showToast = (header, body) => ({\n  type: SHOW_TOAST,\n  payload: {\n    toast: {\n      show: true,\n      header,\n      body\n    }\n  }\n});\n\nexport const hideToast = () => ({\n  type: HIDE_TOAST,\n  payload: {\n    toast: {\n      show: false,\n      header: \"\",\n      body: \"\"\n    }\n  }\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { showAlert } from \"../../redux/actions\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  updateMafia,\n  updateVillage,\n  updatePlayers,\n  updateAllocation\n} from \"../../redux/actions\";\n\nimport {\n  faChevronUp,\n  faChevronDown,\n  faChevronRight,\n  faAngleDoubleUp,\n  faAngleDoubleDown\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\n//Shuffle an array (stackoverflow)\nfunction shuffle(a) {\n  let j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = ~~(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport default withRouter(function GameDesignPage(props) {\n  const dispatch = useDispatch();\n  const mafiaRoles = useSelector(state => state.mafiaRoles),\n    villageRoles = useSelector(state => state.villageRoles),\n    mafiaCount = Object.values(mafiaRoles).reduce(\n      (sum, value) => sum + value,\n      0\n    ),\n    villagerCount = Object.values(villageRoles).reduce(\n      (sum, value) => sum + value,\n      0\n    ),\n    playerNames = useSelector(state => state.playerNames),\n    players = mafiaCount + villagerCount,\n    dummyArray = new Array(players).fill(0);\n\n  const allRoles = { ...mafiaRoles, ...villageRoles };\n\n  const availableRoles = Object.entries(allRoles)\n    .filter(([, count]) => count > 0)\n    .reduce((roleArray, [role, count]) => {\n      for (let i = 0; i < count; i++) roleArray.push(role);\n      return roleArray;\n    }, []);\n\n  const uniqueAvailableRoles = [...new Set(availableRoles)];\n\n  const handleAllocate = e => {\n    e.preventDefault();\n    if (playerNames.length !== players)\n      dispatch(showAlert(\"Enter all player names or remove roles\", \"Error\"));\n    else if (players < 5)\n      dispatch(showAlert(\"Need minimum of 5 players.\", \"Error\"));\n    else if (players === 0) dispatch(showAlert(\"Add some roles\", \"Error\"));\n    else {\n      // Shuffle\n      let shuffledRoles = shuffle(availableRoles);\n\n      let allotedRoles = [];\n      // allocate randomly (Second shuffle)\n      for (let i = 0; i < players; i++) {\n        const countRolesLeft = shuffledRoles.length;\n        const random = Math.random();\n        const allotedRoleIndex = ~~(random * countRolesLeft);\n        const allotedRole = shuffledRoles[allotedRoleIndex];\n\n        allotedRoles.push({\n          alive: true,\n          allotedRole,\n          type: roleDescriptions[allotedRole].type\n        });\n        shuffledRoles.splice(allotedRoleIndex, 1);\n      }\n      dispatch(updateAllocation(allotedRoles));\n      props.history.push(\"/game\");\n    }\n  };\n  const roleDisplay = (roleObject, roleUpdateFn) =>\n    Object.entries(roleObject).map(([role, count]) => (\n      <Container key={role} style={{ borderBottom: \"1px dashed #000000\" }}>\n        <Row>\n          <Col\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              const { type, description, player, narrator } =\n                roleDescriptions[role];\n\n              dispatch(\n                showAlert(\n                  <>\n                    <p>Type: {type} </p>\n                    <p>Description: {description}</p>\n                    <p>Player notes: {player}</p>\n                    <p>Narrator notes: {narrator}</p>\n                  </>,\n                  true,\n                  `Role : ${role}`\n                )\n              );\n            }}>\n            {role}\n          </Col>\n          <Col className=\"d-flex justify-content-end\">\n            <FontAwesomeIcon\n              style={{\n                width: \"20px\",\n                margin: \"4px 0px 4px 16px\",\n                color: count === 0 ? \"#a3a3a3\" : \"inherit\"\n              }}\n              icon={\n                role === \"twins\" && count === 2\n                  ? faAngleDoubleDown\n                  : faChevronDown\n              }\n              onClick={() => {\n                if (count !== 0) {\n                  dispatch(\n                    roleUpdateFn({\n                      ...roleObject,\n                      [role]: count - (role === \"twins\" && count === 2 ? 2 : 1)\n                    })\n                  );\n                }\n              }}\n            />\n            <span\n              style={{\n                textAlign: \"center\",\n                width: \"20px\",\n                margin: \"4px 0px 4px 16px\",\n                color: count === 0 ? \"inherit\" : \"#FF0000\"\n              }}>\n              {count}\n            </span>\n\n            <FontAwesomeIcon\n              style={{ width: \"20px\", margin: \"4px 0px 4px 16px\" }}\n              icon={\n                role === \"twins\" && count === 0 ? faAngleDoubleUp : faChevronUp\n              }\n              onClick={() => {\n                dispatch(\n                  roleUpdateFn({\n                    ...roleObject,\n                    [role]: count + (role === \"twins\" && count === 0 ? 2 : 1)\n                  })\n                );\n              }}\n            />\n          </Col>\n        </Row>\n      </Container>\n    ));\n\n  return (\n    <>\n      <Row style={{ width: \"100%\" }} className=\"d-flex justify-content-end\">\n        <Col className=\"d-flex justify-content-end\">\n          <FontAwesomeIcon\n            icon={faChevronRight}\n            size=\"3x\"\n            style={{ marginRight: \"16px\" }}\n            onClick={() => {\n              props.history.push(\"/game\");\n            }}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col sm={4}>\n          <h1>Roles</h1>\n          <p>Click on individual roles to popup details</p>\n          <h3>Mafia roles ({mafiaCount})</h3>\n          {roleDisplay(mafiaRoles, updateMafia)}\n          <h3 style={{ marginTop: \"20px\" }}>Village roles ({villagerCount})</h3>\n          {roleDisplay(villageRoles, updateVillage)}\n        </Col>\n        <Col sm={4}>\n          <h1 style={{ marginBottom: \"30px\" }}>People ({players})</h1>\n          <Form>\n            {dummyArray.map((p, i) => (\n              <Form.Control\n                key={i}\n                required\n                size=\"lg\"\n                type=\"text\"\n                style={{ marginTop: \"20px\" }}\n                placeholder={`Enter name for player ${i + 1}`}\n                value={playerNames[i] ? playerNames[i].name : \"\"}\n                onChange={e => {\n                  dispatch(\n                    updatePlayers([\n                      ...playerNames.slice(0, i),\n                      { ...playerNames[i], name: e.target.value },\n                      ...playerNames.slice(i + 1)\n                    ])\n                  );\n                }}\n              />\n            ))}\n            <Button\n              type=\"submit\"\n              onClick={handleAllocate}\n              style={{ marginTop: \"20px\", width: \"100%\" }}>\n              Allocate!\n            </Button>\n          </Form>\n        </Col>\n        <Col sm={4}>\n          <span>\n            <h1>Narrator notes </h1>\n          </span>\n\n          {uniqueAvailableRoles\n            .filter(role => roleDescriptions[role].narrator !== \"\")\n            .map((role, i) => (\n              <p key={i}>\n                <strong>{role} </strong> -{roleDescriptions[role].narrator}\n              </p>\n            ))}\n        </Col>\n      </Row>\n    </>\n  );\n});\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  faCheckCircle,\n  faChevronLeft,\n  faBan,\n  faPaperPlane\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nimport {\n  updateAllocation,\n  updatePlayers,\n  showToast\n} from \"../../redux/actions\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\nexport default withRouter(function GameManagementPage(props) {\n  const dispatch = useDispatch();\n  const playerNames = useSelector(state => state.playerNames),\n    allocation = useSelector(state => state.allocation);\n\n  const aliveAllocation = allocation.filter(role => role.alive);\n  const mafiaAlive = aliveAllocation.filter(role => role.type === \"M\").length,\n    villageAlive = aliveAllocation.filter(\n      role => role.type !== \"M\" || role.allotedRole === \"idiot\"\n    ).length;\n\n  return (\n    <Container>\n      <Row style={{ width: \"100%\" }} className=\"d-flex justify-content-start\">\n        <Col className=\"d-flex justify-content-start\">\n          <FontAwesomeIcon\n            icon={faChevronLeft}\n            size=\"3x\"\n            style={{ marginRight: \"16px\" }}\n            onClick={() => {\n              props.history.push(\"/\");\n            }}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <h1>Allocation</h1>\n          <h3>\n            Game status - Mafia {mafiaAlive} vs Villagers {villageAlive}\n          </h3>\n          <h3>\n            {mafiaAlive > villageAlive\n              ? \"Mafia wins!\"\n              : villageAlive > 0 && mafiaAlive === 0 && \"Village wins!\"}\n          </h3>\n          <Container>\n            {allocation.map((role, i) => (\n              <Row\n                key={i}\n                className=\"justify-content-end\"\n                style={{\n                  margin: \"16px\",\n                  textDecoration: role.alive || \"line-through\"\n                }}>\n                <Col\n                  sm={3}\n                  className=\"d-flex align-items-center justify-content-end\">\n                  <span\n                    style={{\n                      color:\n                        role.allotedRole === \"godfather\"\n                          ? \"#FF9800\"\n                          : role.type === \"M\"\n                          ? \"#FF0000\"\n                          : \"inherit\"\n                    }}>\n                    {playerNames[i].name} - {role.allotedRole}\n                  </span>\n                </Col>\n                <Col\n                  sm={9}\n                  className=\"d-flex align-items-center justify-content-start\">\n                  <InputGroup\n                    className=\"align-items-center\"\n                    style={{\n                      margin: \"0px 16px\",\n                      maxWidth: \"90%\"\n                    }}>\n                    <InputGroup.Prepend className=\"justify-content-center\">\n                      <Button\n                        variant={role.alive ? \"success\" : \"danger\"}\n                        onClick={() => {\n                          dispatch(\n                            updateAllocation([\n                              ...allocation.slice(0, i),\n                              { ...role, alive: !role.alive },\n                              ...allocation.slice(i + 1)\n                            ])\n                          );\n                        }}>\n                        {role.alive ? \"Alive\" : \"Dead\"}\n                        <FontAwesomeIcon\n                          style={{ marginLeft: \"16px\", cursor: \"pointer\" }}\n                          icon={role.alive ? faCheckCircle : faBan}\n                        />\n                      </Button>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      value={playerNames[i].hook || \"\"}\n                      placeholder={`Hook for ${playerNames[i].name}`}\n                      onChange={e => {\n                        dispatch(\n                          updatePlayers([\n                            ...playerNames.slice(0, i),\n                            { ...playerNames[i], hook: e.target.value },\n                            ...playerNames.slice(i + 1)\n                          ])\n                        );\n                      }}\n                    />\n                    <InputGroup.Append>\n                      <Button\n                        onClick={async () => {\n                          let otherAlerts = [];\n                          if (role.allotedRole === \"twins\") {\n                            otherAlerts = allocation\n                              .map((role, index) => ({\n                                ...role,\n                                index\n                              }))\n                              .filter(role => role.allotedRole === \"twins\");\n                          } else if (role.allotedRole === \"cop\") {\n                            otherAlerts = allocation\n                              .map((role, index) => ({\n                                ...role,\n                                index\n                              }))\n                              .filter(role => role.allotedRole === \"cop\");\n                          } else if (role.type === \"M\") {\n                            otherAlerts = allocation\n                              .map((role, index) => ({\n                                ...role,\n                                index\n                              }))\n                              .filter(role => role.type === \"M\");\n                          }\n\n                          if (playerNames[i].hook) {\n                            await fetch(playerNames[i].hook, {\n                              method: \"POST\",\n                              body: JSON.stringify({\n                                text: `*Your Role: ${\n                                  role.allotedRole\n                                }.* \\nNote: ${\n                                  roleDescriptions[role.allotedRole].player\n                                }. ${\n                                  otherAlerts.length > 0 &&\n                                  (role.allotedRole === \"twins\" ||\n                                    role.type === \"M\" ||\n                                    role.allotedRole === \"cop\")\n                                    ? `\\nYour known teammates: ${otherAlerts.map(\n                                        mate =>\n                                          `${playerNames[mate.index].name} : ${\n                                            mate.allotedRole\n                                          }`\n                                      )}`\n                                    : \"\"\n                                }\n                      `\n                              })\n                            }).then(response => {\n                              dispatch(\n                                showToast(\n                                  `Alerted ${playerNames[i].name}`,\n                                  false,\n                                  \"Success\"\n                                )\n                              );\n                            });\n                          }\n                        }}>\n                        <FontAwesomeIcon\n                          icon={faPaperPlane}\n                          style={{ cursor: \"pointer\" }}\n                        />\n                      </Button>\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Row>\n            ))}\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n});\n","import React from \"react\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\n\nexport default function RolesPage(props) {\n  const roleDescription = (key, value) => (\n    <Row key={key}>\n      <Card style={{ margin: \"5px\", width: \"100%\" }}>\n        <Card.Header>{key}</Card.Header>\n        <Card.Body>\n          <Card.Title>Team: {value.type}</Card.Title>\n          <Card.Text>Description: {value.description}</Card.Text>\n          <Card.Text>Player note: {value.player}</Card.Text>\n          <Card.Text>Narrator note: {value.narrator}</Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n  );\n  return (\n    <Container>\n      {Object.entries(roleDescriptions).map(([key, value]) =>\n        roleDescription(key, value)\n      )}\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\n\nexport default withRouter(function HowToUsePage(props) {\n  return (\n    <Container style={{ padding: \"15px\", maxWidth: \"100%\" }}>\n      <h1>How to use this app</h1>\n      <p>\n        The app was built targetting gamemasters of{\" \"}\n        <a href=\"https://en.wikipedia.org/wiki/Mafia_(party_game)\">\n          Mafia (party game)\n        </a>\n        , a social deduction game.\n      </p>\n      <br />\n\n      <p>\n        1. Before the game starts, go to <a href=\"/\">Design Page</a> and choose\n        the number of roles of each faction, according to your game design.\n      </p>\n      <br />\n      <p>\n        2. Click the names of the players in the inputs provided, and click\n        allocate.\n      </p>\n      <br />\n      <p>\n        3. You'll be taken to the Game management screen where the player's\n        names and alloted roles will be available. Ping each member of the group\n        their role, and start the game!\n      </p>\n      <br />\n      <p>\n        Optional 4. In case you have webhooks for each person created (slack or\n        hangouts chat or any custom), you can make an optional POST call to a\n        URL that you specify.\n        <br />\n        <br />\n        You can alternatively use your own implementation to alert a person of\n        their role.\n        <br />\n        <br />\n        API call out. <br />\n        <br />\n        url: -- Entered by the game master against the player name -- <br />\n        Type: POST <br />\n        Headers: {`{ Content-Type: application/json }`}\n        <br /> body:\n        {`{ text: \"<<<ROLE AND DESCRIPTION>>> \". }`}\n      </p>\n    </Container>\n  );\n});\n","import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle, faUsers } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nexport default withRouter(function NavigationLinks(props) {\n  return (\n    <Navbar\n      fixed=\"top\"\n      collapseOnSelect\n      expand=\"lg\"\n      bg=\"dark\"\n      variant=\"dark\"\n      style={{ padding: \"0px\" }}>\n      <Navbar.Brand>\n        <Link to=\"/\">Mafia role allocator</Link>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\" activeKey=\"/\">\n          <Nav.Item className=\"main-nav-item\">\n            <Link to=\"/howtoplay\">\n              <FontAwesomeIcon icon={faInfoCircle} className=\"nav-item-icon\" />\n              How to play\n            </Link>\n          </Nav.Item>\n          <Nav.Item className=\"main-nav-item\">\n            <Link to=\"/roles\">\n              <FontAwesomeIcon icon={faUsers} className=\"nav-item-icon\" />\n              Roles\n            </Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hideAlert } from \"../../redux/actions\";\n\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function StopAlert(props) {\n  const dispatch = useDispatch();\n  const { show, header, body } = useSelector(state => state.alert);\n\n  return (\n    <Modal show={show} onHide={() => dispatch(hideAlert())}>\n      <Modal.Header closeButton>{header}</Modal.Header>\n      <Modal.Body>{body}</Modal.Body>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Toast from \"react-bootstrap/Toast\";\nimport { hideToast } from \"../../redux/actions\";\n\nexport default function ShortToast(props) {\n  const dispatch = useDispatch();\n  const { show, header, body } = useSelector(state => state.toast);\n\n  return (\n    <Toast\n      style={{\n        position: \"absolute\",\n        top: 0,\n        right: 0\n      }}\n      autoHide\n      dismissible\n      show={show}\n      delay={5000}\n      onClose={() => {\n        dispatch(hideToast());\n      }}>\n      <Toast.Header>{header}</Toast.Header>\n      <Toast.Body>{body}</Toast.Body>\n    </Toast>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport GameDesignPage from \"./pages/GameDesignPage\";\nimport GameManagementPage from \"./pages/GameManagementPage\";\nimport RolesPage from \"./pages/RolesPage\";\nimport HowToUsePage from \"./pages/HowToUsePage\";\n\nimport NavigationLinks from \"./components/NavigationLinks\";\nimport StopAlert from \"./components/StopAlert\";\nimport ShortToast from \"./components/ShortToast\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Container fluid style={{ marginTop: \"60px\", padding: \"10px\" }}>\n        <NavigationLinks />\n\n        <Switch>\n          <Route exact path=\"/home\" component={GameDesignPage} />\n          <Route exact path=\"/roles\" component={RolesPage} />\n          <Route exact path=\"/game\" component={GameManagementPage} />\n          <Route exact path=\"/howtoplay\" component={HowToUsePage} />\n        </Switch>\n        <Row\n          style={{\n            padding: \"15px\",\n            backgroundColor: \"#000000\",\n            color: \"#FFFFFF\"\n          }}>\n          <p>Built with React. </p>\n        </Row>\n      </Container>\n      <StopAlert />\n      <ShortToast />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  UPDATE_MAFIA_ROLES,\n  UPDATE_VILLAGE_ROLES,\n  UPDATE_PLAYER_NAMES,\n  UPDATE_ALLOCATION,\n  UPDATE_PLAYER_CHANNELS,\n  SHOW_ALERT,\n  HIDE_ALERT,\n  SHOW_TOAST,\n  HIDE_TOAST\n} from \"../../constants\";\n\nconst initialState = {\n  mafiaRoles: {\n    kamikaze: 0,\n    framer: 0,\n    silencer: 0,\n    godfather: 0,\n    mafia: 1\n  },\n  villageRoles: {\n    idiot: 0,\n    deputy: 0,\n    granny: 0,\n    creep: 0,\n    gravedigger: 0,\n    sniper: 0,\n    bulletproof: 0,\n    doc: 1,\n    cop: 1,\n    villager: 1,\n    twins: 0\n  },\n  playerNames: [],\n  allocation: [],\n  alert: {\n    show: false,\n    header: \"\",\n    body: \"\"\n  },\n  toast: {\n    variant: \"success\",\n    show: false,\n    header: \"\",\n    body: \"\"\n  }\n};\n\nconst rootReducer = (state = initialState, action) =>\n  [\n    UPDATE_MAFIA_ROLES,\n    UPDATE_PLAYER_NAMES,\n    UPDATE_VILLAGE_ROLES,\n    UPDATE_ALLOCATION,\n    UPDATE_PLAYER_CHANNELS,\n    SHOW_ALERT,\n    HIDE_ALERT,\n    SHOW_TOAST,\n    HIDE_TOAST\n  ].includes(action.type)\n    ? { ...state, ...action.payload }\n    : state;\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}