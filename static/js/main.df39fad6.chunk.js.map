{"version":3,"sources":["redux/constants/index.js","redux/actions/index.js","pages/GameDesignPage/index.js","pages/GameManagementPage/index.js","pages/RolesPage/index.js","pages/HowToUsePage/index.js","components/NavigationLinks/index.js","components/StopAlert/index.js","components/ShortToast/index.js","App.js","serviceWorker.js","redux/store/reducers/index.js","redux/store/index.js","index.js"],"names":["UPDATE_MAFIA_ROLES","UPDATE_VILLAGE_ROLES","UPDATE_PLAYER_NAMES","UPDATE_ALLOCATION","UPDATE_PLAYER_CHANNELS","SHOW_ALERT","HIDE_ALERT","SHOW_TOAST","HIDE_TOAST","updateMafia","mafiaRoles","type","payload","updateVillage","villageRoles","updatePlayers","playerNames","updateAllocation","allocation","showAlert","body","header","alert","show","withRouter","props","dispatch","useDispatch","useSelector","state","mafiaCount","Object","values","reduce","sum","value","villagerCount","players","dummyArray","Array","fill","allRoles","availableRoles","entries","filter","roleArray","role","count","i","push","uniqueAvailableRoles","Set","roleDisplay","roleObject","roleUpdateFn","map","Container","key","style","borderBottom","Row","Col","cursor","onClick","roleDescriptions","description","player","narrator","className","width","margin","color","icon","faAngleDoubleDown","faChevronDown","textAlign","faAngleDoubleUp","faChevronUp","sm","marginTop","marginBottom","Form","p","Control","required","size","placeholder","name","onChange","e","slice","target","Button","preventDefault","length","shuffledRoles","a","j","x","Math","random","shuffle","allotedRoles","countRolesLeft","allotedRoleIndex","allotedRole","alive","splice","history","variant","GameManagementPage","useHistory","aliveAllocation","mafiaAlive","villageAlive","idiotAlive","faChevronLeft","marginRight","backgroundColor","padding","textDecoration","InputGroup","maxWidth","Prepend","marginLeft","faCheckCircle","faBan","hook","Append","disabled","str","RegExp","test","otherAlerts","index","fetch","method","JSON","stringify","text","mate","join","then","response","toast","faPaperPlane","RolesPage","Card","Header","Body","Title","Text","roleDescription","href","borderRadius","Navbar","fixed","collapseOnSelect","expand","bg","Brand","to","Toggle","aria-controls","Collapse","id","Nav","activeKey","Item","faInfoCircle","faUsers","StopAlert","Modal","onHide","closeButton","ShortToast","Toast","position","top","right","autohide","delay","onClose","App","basename","fluid","minHeight","exact","path","component","HowToUsePage","GameDesignPage","bottom","Boolean","window","location","hostname","match","initialState","kamikaze","framer","silencer","godfather","mafia","idiot","deputy","granny","creep","gravedigger","sniper","bulletproof","doc","cop","villager","twins","rootReducer","action","includes","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df39fad6.chunk.js","sourcesContent":["export const UPDATE_MAFIA_ROLES = \"UPDATE_MAFIA_ROLES\";\nexport const UPDATE_VILLAGE_ROLES = \"UPDATE_VILLAGE_ROLES\";\nexport const UPDATE_PLAYER_NAMES = \"UPDATE_PLAYER_NAMES\";\nexport const UPDATE_ALLOCATION = \"UPDATE_ALLOCATION\";\nexport const UPDATE_PLAYER_CHANNELS = \"UPDATE_PLAYER_CHANNELS\";\nexport const UPDATE_SLACK_API_KEY = \"UPDATE_SLACK_KEY\";\nexport const SHOW_ALERT = \"SHOW_ALERT\";\nexport const HIDE_ALERT = \"HIDE_ALERT\";\nexport const SHOW_TOAST = \"SHOW_TOAST\";\nexport const HIDE_TOAST = \"HIDE_TOAST\";\n","import {\n  UPDATE_MAFIA_ROLES,\n  UPDATE_VILLAGE_ROLES,\n  UPDATE_PLAYER_NAMES,\n  UPDATE_ALLOCATION,\n  UPDATE_PLAYER_CHANNELS,\n  SHOW_ALERT,\n  HIDE_ALERT,\n  SHOW_TOAST,\n  HIDE_TOAST\n} from \"../constants\";\n\nexport const updateMafia = mafiaRoles => ({\n  type: UPDATE_MAFIA_ROLES,\n  payload: { mafiaRoles }\n});\n\nexport const updateVillage = villageRoles => ({\n  type: UPDATE_VILLAGE_ROLES,\n  payload: { villageRoles }\n});\n\nexport const updatePlayers = playerNames => ({\n  type: UPDATE_PLAYER_NAMES,\n  payload: { playerNames }\n});\n\nexport const updateAllocation = allocation => ({\n  type: UPDATE_ALLOCATION,\n  payload: { allocation }\n});\n\nexport const updatePlayerChannels = playerChannels => ({\n  type: UPDATE_PLAYER_CHANNELS,\n  payload: { playerChannels }\n});\n\nexport const showAlert = (body, header) => ({\n  type: SHOW_ALERT,\n  payload: {\n    alert: {\n      show: true,\n      header,\n      body\n    }\n  }\n});\n\nexport const hideAlert = () => ({\n  type: HIDE_ALERT,\n  payload: {\n    alert: {\n      show: false,\n      header: \"\",\n      body: \"\"\n    }\n  }\n});\n\nexport const showToast = (header, body) => ({\n  type: SHOW_TOAST,\n  payload: {\n    toast: {\n      show: true,\n      header,\n      body\n    }\n  }\n});\n\nexport const hideToast = () => ({\n  type: HIDE_TOAST,\n  payload: {\n    toast: {\n      show: false,\n      header: \"\",\n      body: \"\"\n    }\n  }\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { showAlert } from \"../../redux/actions\";\n\nimport { withRouter } from \"react-router-dom\";\nimport {\n  updateMafia,\n  updateVillage,\n  updatePlayers,\n  updateAllocation\n} from \"../../redux/actions\";\n\nimport {\n  faChevronUp,\n  faChevronDown,\n  faChevronRight,\n  faAngleDoubleUp,\n  faAngleDoubleDown\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\n//Shuffle an array (stackoverflow)\nfunction shuffle(a) {\n  let j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = ~~(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport default withRouter(function GameDesignPage(props) {\n  const dispatch = useDispatch();\n  const mafiaRoles = useSelector(state => state.mafiaRoles),\n    villageRoles = useSelector(state => state.villageRoles),\n    mafiaCount = Object.values(mafiaRoles).reduce(\n      (sum, value) => sum + value,\n      0\n    ),\n    villagerCount = Object.values(villageRoles).reduce(\n      (sum, value) => sum + value,\n      0\n    ),\n    playerNames = useSelector(state => state.playerNames),\n    players = mafiaCount + villagerCount,\n    dummyArray = new Array(players).fill(0);\n\n  const allRoles = { ...mafiaRoles, ...villageRoles };\n\n  const availableRoles = Object.entries(allRoles)\n    .filter(([, count]) => count > 0)\n    .reduce((roleArray, [role, count]) => {\n      for (let i = 0; i < count; i++) roleArray.push(role);\n      return roleArray;\n    }, []);\n\n  const uniqueAvailableRoles = [...new Set(availableRoles)];\n\n  const handleAllocate = e => {\n    e.preventDefault();\n    if (playerNames.length !== players)\n      dispatch(showAlert(\"Enter all player names or remove roles\", \"Error\"));\n    else if (players < 5)\n      dispatch(showAlert(\"Need minimum of 5 players.\", \"Error\"));\n    else if (players === 0) dispatch(showAlert(\"Add some roles\", \"Error\"));\n    else {\n      // Shuffle\n      let shuffledRoles = shuffle(availableRoles);\n\n      let allotedRoles = [];\n      // allocate randomly (Second shuffle)\n      for (let i = 0; i < players; i++) {\n        const countRolesLeft = shuffledRoles.length;\n        const random = Math.random();\n        const allotedRoleIndex = ~~(random * countRolesLeft);\n        const allotedRole = shuffledRoles[allotedRoleIndex];\n\n        allotedRoles.push({\n          alive: true,\n          allotedRole,\n          type: roleDescriptions[allotedRole].type\n        });\n        shuffledRoles.splice(allotedRoleIndex, 1);\n      }\n      dispatch(updateAllocation(allotedRoles));\n      props.history.push(\"/game\");\n    }\n  };\n  const roleDisplay = (roleObject, roleUpdateFn) =>\n    Object.entries(roleObject).map(([role, count]) => (\n      <Container key={role} style={{ borderBottom: \"1px dashed #000000\" }}>\n        <Row>\n          <Col\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              const { type, description, player, narrator } =\n                roleDescriptions[role];\n\n              dispatch(\n                showAlert(\n                  <>\n                    <p>Type: {type} </p>\n                    <p>Description: {description}</p>\n                    <p>Player notes: {player}</p>\n                    <p>Narrator notes: {narrator}</p>\n                  </>,\n                  true,\n                  `Role : ${role}`\n                )\n              );\n            }}>\n            {role}\n          </Col>\n          <Col className=\"d-flex justify-content-end\">\n            <FontAwesomeIcon\n              style={{\n                width: \"20px\",\n                margin: \"4px 0px 4px 16px\",\n                color: count === 0 ? \"#a3a3a3\" : \"inherit\"\n              }}\n              icon={\n                role === \"twins\" && count === 2\n                  ? faAngleDoubleDown\n                  : faChevronDown\n              }\n              onClick={() => {\n                if (count !== 0) {\n                  dispatch(\n                    roleUpdateFn({\n                      ...roleObject,\n                      [role]: count - (role === \"twins\" && count === 2 ? 2 : 1)\n                    })\n                  );\n                }\n              }}\n            />\n            <span\n              style={{\n                textAlign: \"center\",\n                width: \"20px\",\n                margin: \"4px 0px 4px 16px\",\n                color: count === 0 ? \"inherit\" : \"#FF0000\"\n              }}>\n              {count}\n            </span>\n\n            <FontAwesomeIcon\n              style={{ width: \"20px\", margin: \"4px 0px 4px 16px\" }}\n              icon={\n                role === \"twins\" && count === 0 ? faAngleDoubleUp : faChevronUp\n              }\n              onClick={() => {\n                dispatch(\n                  roleUpdateFn({\n                    ...roleObject,\n                    [role]: count + (role === \"twins\" && count === 0 ? 2 : 1)\n                  })\n                );\n              }}\n            />\n          </Col>\n        </Row>\n      </Container>\n    ));\n\n  return (\n    <>\n      <Row\n        style={{ width: \"100%\" }}\n        className=\"d-flex justify-content-end\"></Row>\n      <Row>\n        <Col sm={4}>\n          <h1>Roles</h1>\n          <p>Click on individual roles to popup details</p>\n          <h3>Mafia roles ({mafiaCount})</h3>\n          {roleDisplay(mafiaRoles, updateMafia)}\n          <h3 style={{ marginTop: \"20px\" }}>Village roles ({villagerCount})</h3>\n          {roleDisplay(villageRoles, updateVillage)}\n        </Col>\n        <Col sm={4}>\n          <h1 style={{ marginBottom: \"30px\" }}>People ({players})</h1>\n          <Form>\n            {dummyArray.map((p, i) => (\n              <Form.Control\n                key={i}\n                required\n                size=\"lg\"\n                type=\"text\"\n                style={{ marginTop: \"20px\" }}\n                placeholder={`Enter name for player ${i + 1}`}\n                value={playerNames[i] ? playerNames[i].name : \"\"}\n                onChange={e => {\n                  dispatch(\n                    updatePlayers([\n                      ...playerNames.slice(0, i),\n                      { ...playerNames[i], name: e.target.value },\n                      ...playerNames.slice(i + 1)\n                    ])\n                  );\n                }}\n              />\n            ))}\n            <Button\n              type=\"submit\"\n              onClick={handleAllocate}\n              style={{ marginTop: \"20px\", width: \"100%\" }}>\n              Allocate!\n            </Button>\n            <Button\n              style={{ marginTop: \"20px\", width: \"100%\" }}\n              variant=\"outline-primary\"\n              onClick={() => {\n                props.history.push(\"/game\");\n              }}>\n              Current game\n            </Button>\n          </Form>\n        </Col>\n        <Col sm={4}>\n          <span>\n            <h1>Narrator notes </h1>\n          </span>\n\n          {uniqueAvailableRoles\n            .filter(role => roleDescriptions[role].narrator !== \"\")\n            .map((role, i) => (\n              <p key={i}>\n                <strong>{role} </strong> -{roleDescriptions[role].narrator}\n              </p>\n            ))}\n        </Col>\n      </Row>\n    </>\n  );\n});\n","import React from \"react\";\nimport { withRouter, useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  faCheckCircle,\n  faChevronLeft,\n  faBan,\n  faPaperPlane\n} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nimport {\n  updateAllocation,\n  updatePlayers,\n  showToast\n} from \"../../redux/actions\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\nconst isValidUrl = str => {\n  var pattern = new RegExp(\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\n    \"i\"\n  ); // fragment locator\n  return !!pattern.test(str);\n};\n\nexport default function GameManagementPage(props) {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n  const playerNames = useSelector(state => state.playerNames),\n    allocation = useSelector(state => state.allocation);\n\n  const aliveAllocation = allocation.filter(role => role.alive);\n  const mafiaAlive = aliveAllocation.filter(role => role.type === \"M\").length,\n    villageAlive = aliveAllocation.filter(\n      role => role.type !== \"M\" || role.allotedRole === \"idiot\"\n    ).length;\n  const idiotAlive =\n    aliveAllocation.filter(role => role.allotedRole === \"idiot\").length > 0;\n  return (\n    <Container>\n      <Row style={{ width: \"100%\" }} className=\"d-flex justify-content-start\">\n        <Col className=\"d-flex justify-content-start align-items-center\" sm={1}>\n          <Button\n            variant=\"light\"\n            onClick={() => {\n              history.push(\"/\");\n            }}>\n            <FontAwesomeIcon\n              icon={faChevronLeft}\n              size=\"2x\"\n              style={{ marginRight: \"16px\" }}\n            />\n          </Button>\n        </Col>\n        <Col className=\"d-flex justify-content-start align-items-center\">\n          <h1>Allocation</h1>\n        </Col>\n      </Row>\n\n      <Col>\n        <Row>\n          <Col sm={2}>Game status</Col>\n          <Col sm={2} className=\"\">\n            Mafia <span style={{ color: \"red\" }}>{mafiaAlive}</span>\n          </Col>\n          <Col sm={2}>\n            Villagers <span style={{ color: \"green\" }}>{villageAlive}</span>\n          </Col>\n          <Col sm={2}>{idiotAlive && `Idiot is active`}</Col>\n          <Col sm={4}>\n            <strong>\n              {mafiaAlive === 0 && villageAlive === 0 ? (\n                \"Start a game first\"\n              ) : mafiaAlive >= villageAlive ? (\n                <span\n                  style={{\n                    backgroundColor: \"red\",\n                    padding: \"5px\",\n                    color: \"white\"\n                  }}>\n                  Mafia wins!\n                </span>\n              ) : (\n                villageAlive > 0 &&\n                mafiaAlive === 0 && (\n                  <span\n                    style={{\n                      backgroundColor: \"green\",\n                      padding: \"5px\",\n                      color: \"white\"\n                    }}>\n                    Village wins\n                  </span>\n                )\n              )}\n            </strong>\n          </Col>\n        </Row>\n\n        <Row className=\"justify-content-end\">\n          <Col sm={3} style={{ textAlign: \"center\" }}>\n            <strong>Notes, name</strong>\n          </Col>\n          <Col sm={9} style={{ textAlign: \"center\" }}>\n            <strong>Webhook</strong>\n          </Col>\n        </Row>\n        {allocation.map((role, i) => (\n          <Row\n            key={i}\n            className=\"justify-content-end\"\n            style={{\n              margin: \"16px\",\n              textDecoration: role.alive || \"line-through\"\n            }}>\n            <Col\n              sm={3}\n              className=\"d-flex align-items-center justify-content-between\">\n              <Form.Control style={{ width: \"100px\" }} />\n              <span\n                style={{\n                  color:\n                    role.allotedRole === \"godfather\"\n                      ? \"#FF9800\"\n                      : role.type === \"M\"\n                      ? \"#FF0000\"\n                      : \"inherit\"\n                }}>\n                {playerNames[i].name} - {role.allotedRole}\n              </span>\n            </Col>\n            <Col\n              sm={9}\n              className=\"d-flex align-items-center justify-content-start\">\n              <InputGroup\n                className=\"align-items-center\"\n                style={{\n                  margin: \"0px 16px\",\n                  maxWidth: \"90%\"\n                }}>\n                <InputGroup.Prepend className=\"justify-content-center\">\n                  <Button\n                    variant={role.alive ? \"success\" : \"danger\"}\n                    onClick={() => {\n                      dispatch(\n                        updateAllocation([\n                          ...allocation.slice(0, i),\n                          { ...role, alive: !role.alive },\n                          ...allocation.slice(i + 1)\n                        ])\n                      );\n                    }}>\n                    {role.alive ? \"Alive\" : \"Dead\"}\n                    <FontAwesomeIcon\n                      style={{ marginLeft: \"16px\", cursor: \"pointer\" }}\n                      icon={role.alive ? faCheckCircle : faBan}\n                    />\n                  </Button>\n                </InputGroup.Prepend>\n                <Form.Control\n                  value={playerNames[i].hook || \"\"}\n                  placeholder={`Hook for ${playerNames[i].name}`}\n                  onChange={e => {\n                    dispatch(\n                      updatePlayers([\n                        ...playerNames.slice(0, i),\n                        { ...playerNames[i], hook: e.target.value },\n                        ...playerNames.slice(i + 1)\n                      ])\n                    );\n                  }}\n                />\n                <InputGroup.Append>\n                  <Button\n                    disabled={!isValidUrl(playerNames[i].hook)}\n                    onClick={async () => {\n                      let otherAlerts = [];\n                      if (role.allotedRole === \"twins\") {\n                        otherAlerts = allocation\n                          .map((role, index) => ({\n                            ...role,\n                            index\n                          }))\n                          .filter(role => role.allotedRole === \"twins\");\n                      } else if (role.type === \"M\") {\n                        otherAlerts = allocation\n                          .map((role, index) => ({\n                            ...role,\n                            index\n                          }))\n                          .filter(role => role.type === \"M\");\n                      }\n\n                      if (playerNames[i].hook) {\n                        await fetch(playerNames[i].hook, {\n                          method: \"POST\",\n                          body: JSON.stringify({\n                            text: `*Your Role: ${role.allotedRole}.* \\nNote: ${\n                              roleDescriptions[role.allotedRole].player\n                            }. ${\n                              otherAlerts.length > 0 &&\n                              (role.allotedRole === \"twins\" ||\n                                role.type === \"M\" ||\n                                role.allotedRole === \"cop\")\n                                ? `\\nYour known teammates: ${otherAlerts\n                                    .map(\n                                      mate =>\n                                        `\\n${playerNames[mate.index].name} : ${\n                                          mate.allotedRole\n                                        }`\n                                    )\n                                    .join(\"\")}`\n                                : \"\"\n                            }\n                      `\n                          })\n                        }).then(response => {\n                          dispatch(\n                            showToast(\n                              `Alerted ${playerNames[i].name} - ${role.allotedRole}`,\n                              false,\n                              \"Success\"\n                            )\n                          );\n                        });\n                      }\n                    }}>\n                    <FontAwesomeIcon\n                      icon={faPaperPlane}\n                      style={{ cursor: \"pointer\" }}\n                    />\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </Col>\n          </Row>\n        ))}\n      </Col>\n    </Container>\n  );\n}\n","import React from \"react\";\n\nimport roleDescriptions from \"../../roleDescriptions.json\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\n\nexport default function RolesPage(props) {\n  const roleDescription = (key, value) => (\n    <Row key={key}>\n      <Card style={{ margin: \"5px\", width: \"100%\" }}>\n        <Card.Header>{key}</Card.Header>\n        <Card.Body>\n          <Card.Title>Team: {value.type}</Card.Title>\n          <Card.Text>Description: {value.description}</Card.Text>\n          <Card.Text>Player note: {value.player}</Card.Text>\n          <Card.Text>Narrator note: {value.narrator}</Card.Text>\n        </Card.Body>\n      </Card>\n    </Row>\n  );\n  return (\n    <Container>\n      {Object.entries(roleDescriptions).map(([key, value]) =>\n        roleDescription(key, value)\n      )}\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\n\nexport default withRouter(function HowToUsePage(props) {\n  return (\n    <Container style={{ padding: \"15px\", maxWidth: \"100%\" }}>\n      <h1>How to use this app</h1>\n      <div>\n        The app was built targetting gamemasters of{\" \"}\n        <a href=\"https://en.wikipedia.org/wiki/Mafia_(party_game)\">\n          Mafia (party game)\n        </a>\n        , a social deduction game.\n      </div>\n      <br />\n\n      <div>\n        1. Before the game starts, go to <a href=\"/\">Design Page</a> and choose\n        the number of roles of each faction, according to your game design.\n      </div>\n      <br />\n      <p>\n        2. Click the names of the players in the inputs provided, and click\n        allocate.\n      </p>\n      <br />\n      <p>\n        3. You'll be taken to the Game management screen where the player's\n        names and alloted roles will be available.\n      </p>\n      <br />\n      <div>\n        4. Either <br />\n        a. Ping each member of the group their role, and start the game!\n        <br />\n        OR\n        <br />\n        b. In case you have webhooks for each person created (slack or Google\n        Chat or any custom), you can make an optional POST call to a URL that\n        you specify.\n        <br />\n        Click here to learn how to create webhooks for{\" \"}\n        <a href=\"https://slack.com/intl/en-in/help/articles/115005265063-Incoming-webhooks-for-Slack\">\n          Slack\n        </a>{\" \"}\n        and{\" \"}\n        <a href=\"https://developers.google.com/chat/how-tos/webhooks\">\n          Google Chat\n        </a>\n        .\n        <br />\n        <br />\n        You can alternatively write your own implementation to alert a person of\n        their role. <br /> Your API must be prepared to accept the call as\n        detailed below.\n        <br />\n        <br />\n        <p\n          style={{\n            backgroundColor: \"lightgrey\",\n            padding: \"10px 30px\",\n            borderRadius: \"5px\"\n          }}>\n          url: <i>URL to be called</i> <br />\n          Method: POST <br />\n          Headers: {`{ Content-Type: \\`application/json\\` }`}\n          <br /> body:\n          {` \\n { \\n text: \\`\\$\\{ROLE AND DESCRIPTION\\} \\` }`}\n        </p>\n      </div>\n    </Container>\n  );\n});\n","import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle, faUsers } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nexport default withRouter(function NavigationLinks(props) {\n  return (\n    <Navbar\n      fixed=\"top\"\n      collapseOnSelect\n      expand=\"lg\"\n      bg=\"dark\"\n      variant=\"dark\"\n      style={{ padding: \"0px 20px\" }}>\n      <Navbar.Brand>\n        <Link to=\"/\">Mafia role allocator</Link>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\" activeKey=\"/\">\n          <Nav.Item className=\"main-nav-item\">\n            <Link to=\"/howtoplay\">\n              <FontAwesomeIcon icon={faInfoCircle} className=\"nav-item-icon\" />\n              How to play\n            </Link>\n          </Nav.Item>\n          <Nav.Item className=\"main-nav-item\">\n            <Link to=\"/roles\">\n              <FontAwesomeIcon icon={faUsers} className=\"nav-item-icon\" />\n              Roles\n            </Link>\n          </Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n});\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hideAlert } from \"../../redux/actions\";\n\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function StopAlert(props) {\n  const dispatch = useDispatch();\n  const { show, header, body } = useSelector(state => state.alert);\n\n  return (\n    <Modal show={show} onHide={() => dispatch(hideAlert())}>\n      <Modal.Header closeButton>{header}</Modal.Header>\n      <Modal.Body>{body}</Modal.Body>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Toast from \"react-bootstrap/Toast\";\nimport { hideToast } from \"../../redux/actions\";\n\nexport default function ShortToast(props) {\n  const dispatch = useDispatch();\n  const { show, header, body } = useSelector(state => state.toast);\n\n  return (\n    <Toast\n      style={{\n        position: \"absolute\",\n        top: 70,\n        right: 20\n      }}\n      autohide\n      show={show}\n      delay={5000}\n      onClose={() => {\n        dispatch(hideToast());\n      }}>\n      <Toast.Header>{header}</Toast.Header>\n      <Toast.Body>{body}</Toast.Body>\n    </Toast>\n  );\n}\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport GameDesignPage from \"./pages/GameDesignPage\";\nimport GameManagementPage from \"./pages/GameManagementPage\";\nimport RolesPage from \"./pages/RolesPage\";\nimport HowToUsePage from \"./pages/HowToUsePage\";\n\nimport NavigationLinks from \"./components/NavigationLinks\";\nimport StopAlert from \"./components/StopAlert\";\nimport ShortToast from \"./components/ShortToast\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <Container\n        fluid\n        style={{\n          marginTop: \"60px\",\n          padding: \"0px 10px 0px 20px\",\n          minHeight: \"100%\"\n        }}>\n        <NavigationLinks />\n\n        <Switch>\n          <Route exact path=\"/roles\" component={RolesPage} />\n          <Route exact path=\"/game\" component={GameManagementPage} />\n          <Route exact path=\"/howtoplay\" component={HowToUsePage} />\n          <Route exact path=\"/*\" component={GameDesignPage} />\n        </Switch>\n        <Row\n          style={{\n            padding: \"15px\",\n            backgroundColor: \"#000000\",\n            color: \"#FFFFFF\",\n            bottom: \"0\"\n          }}>\n          <p>Built with React. </p>\n        </Row>\n      </Container>\n      <StopAlert />\n      <ShortToast />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  UPDATE_MAFIA_ROLES,\n  UPDATE_VILLAGE_ROLES,\n  UPDATE_PLAYER_NAMES,\n  UPDATE_ALLOCATION,\n  UPDATE_PLAYER_CHANNELS,\n  SHOW_ALERT,\n  HIDE_ALERT,\n  SHOW_TOAST,\n  HIDE_TOAST\n} from \"../../constants\";\n\nconst initialState = {\n  mafiaRoles: {\n    kamikaze: 0,\n    framer: 0,\n    silencer: 0,\n    godfather: 0,\n    mafia: 1\n  },\n  villageRoles: {\n    idiot: 0,\n    deputy: 0,\n    granny: 0,\n    creep: 0,\n    gravedigger: 0,\n    sniper: 0,\n    bulletproof: 1,\n    doc: 1,\n    cop: 1,\n    villager: 1,\n    twins: 0\n  },\n  playerNames: [\n    { name: \"A\" },\n    { name: \"A\" },\n    { name: \"A\" },\n    { name: \"A\" },\n    { name: \"A\" }\n  ],\n  allocation: [\n    { alive: true, allotedRole: \"cop\" },\n    { alive: true, allotedRole: \"mafia\", type: \"M\" },\n    { alive: true, allotedRole: \"cop\" },\n    { alive: true, allotedRole: \"cop\" },\n    { alive: true, allotedRole: \"cop\" }\n  ],\n  alert: {\n    show: false,\n    header: \"\",\n    body: \"\"\n  },\n  toast: {\n    variant: \"success\",\n    show: false,\n    header: \"\",\n    body: \"\"\n  }\n};\n\nconst rootReducer = (state = initialState, action) =>\n  [\n    UPDATE_MAFIA_ROLES,\n    UPDATE_PLAYER_NAMES,\n    UPDATE_VILLAGE_ROLES,\n    UPDATE_ALLOCATION,\n    UPDATE_PLAYER_CHANNELS,\n    SHOW_ALERT,\n    HIDE_ALERT,\n    SHOW_TOAST,\n    HIDE_TOAST\n  ].includes(action.type)\n    ? { ...state, ...action.payload }\n    : state;\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}